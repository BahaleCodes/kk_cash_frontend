{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from 'react';\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n\n  const [token, setToken] = useState(false);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(false);\n  const login = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    setUserId(uid);\n    const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setTokenExpirationDate(tokenExpirationDate);\n    localStorage.setItem('userData', JSON.stringify({\n      userId: uid,\n      token: token,\n      expiration: tokenExpirationDate.toISOString()\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setTokenExpirationDate(null);\n    setUserId(null);\n    localStorage.removeItem('userData');\n  }, []);\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\n    }\n  }, [login]);\n  return {\n    token,\n    login,\n    logout,\n    userId\n  };\n};\n\n_s(useAuth, \"+oy5I1iyA1O0VWPzFLYiMGJUUq0=\");","map":{"version":3,"sources":["/Users/thabomponya/Documents/GitHub/kkCash/client/src/shared/hooks/auth-hook.js"],"names":["useState","useCallback","useEffect","logoutTimer","useAuth","token","setToken","tokenExpirationDate","setTokenExpirationDate","userId","setUserId","login","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","logout","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AAEA,IAAIC,WAAJ;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACO,mBAAD,EAAsBC,sBAAtB,IAAgDR,QAAQ,EAA9D;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMW,KAAK,GAAGV,WAAW,CAAC,CAACW,GAAD,EAAMP,KAAN,EAAaQ,cAAb,KAAgC;AACzDP,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAK,IAAAA,SAAS,CAACE,GAAD,CAAT;AACA,UAAML,mBAAmB,GACxBM,cAAc,IAAI,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,EAAP,GAAY,EAA5C,CADnB;AAEAP,IAAAA,sBAAsB,CAACD,mBAAD,CAAtB;AACAS,IAAAA,YAAY,CAACC,OAAb,CACC,UADD,EAECC,IAAI,CAACC,SAAL,CAAe;AACdV,MAAAA,MAAM,EAAEG,GADM;AAEdP,MAAAA,KAAK,EAAEA,KAFO;AAGde,MAAAA,UAAU,EAAEb,mBAAmB,CAACc,WAApB;AAHE,KAAf,CAFD;AAQA,GAdwB,EActB,EAdsB,CAAzB;AAgBA,QAAMC,MAAM,GAAGrB,WAAW,CAAC,MAAM;AAChCK,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAE,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAM,IAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;AACA,GALyB,EAKvB,EALuB,CAA1B;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIG,KAAK,IAAIE,mBAAb,EAAkC;AACjC,YAAMiB,aAAa,GAAGjB,mBAAmB,CAACQ,OAApB,KAAgC,IAAID,IAAJ,GAAWC,OAAX,EAAtD;AACAZ,MAAAA,WAAW,GAAGsB,UAAU,CAACH,MAAD,EAASE,aAAT,CAAxB;AACA,KAHD,MAIK;AACJE,MAAAA,YAAY,CAACvB,WAAD,CAAZ;AACA;AACD,GARQ,EAQN,CAACE,KAAD,EAAQiB,MAAR,EAAgBf,mBAAhB,CARM,CAAT;AAUAL,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMyB,UAAU,GAAGT,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,UAArB,CAAX,CAAnB;;AACA,QACCF,UAAU,IACVA,UAAU,CAACtB,KADX,IAEA,IAAIS,IAAJ,CAASa,UAAU,CAACP,UAApB,IAAkC,IAAIN,IAAJ,EAHnC,EAIE;AACDH,MAAAA,KAAK,CAACgB,UAAU,CAAClB,MAAZ,EAAoBkB,UAAU,CAACtB,KAA/B,EAAsC,IAAIS,IAAJ,CAASa,UAAU,CAACP,UAApB,CAAtC,CAAL;AACA;AACD,GATQ,EASN,CAACT,KAAD,CATM,CAAT;AAWA,SAAO;AAAEN,IAAAA,KAAF;AAASM,IAAAA,KAAT;AAAgBW,IAAAA,MAAhB;AAAwBb,IAAAA;AAAxB,GAAP;AACA,CAlDM;;GAAML,O","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n\tconst [token, setToken] = useState(false);\n\tconst [tokenExpirationDate, setTokenExpirationDate] = useState();\n\tconst [userId, setUserId] = useState(false);\n\n\tconst login = useCallback((uid, token, expirationDate) => {\n\t\tsetToken(token);\n\t\tsetUserId(uid);\n\t\tconst tokenExpirationDate =\n\t\t\texpirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n\t\tsetTokenExpirationDate(tokenExpirationDate);\n\t\tlocalStorage.setItem(\n\t\t\t'userData',\n\t\t\tJSON.stringify({\n\t\t\t\tuserId: uid,\n\t\t\t\ttoken: token,\n\t\t\t\texpiration: tokenExpirationDate.toISOString()\n\t\t\t})\n\t\t);\n\t}, []);\n\n\tconst logout = useCallback(() => {\n\t\tsetToken(null);\n\t\tsetTokenExpirationDate(null);\n\t\tsetUserId(null);\n\t\tlocalStorage.removeItem('userData');\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (token && tokenExpirationDate) {\n\t\t\tconst remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n\t\t\tlogoutTimer = setTimeout(logout, remainingTime);\n\t\t}\n\t\telse {\n\t\t\tclearTimeout(logoutTimer);\n\t\t}\n\t}, [token, logout, tokenExpirationDate]);\n\n\tuseEffect(() => {\n\t\tconst storedData = JSON.parse(localStorage.getItem('userData'));\n\t\tif (\n\t\t\tstoredData &&\n\t\t\tstoredData.token &&\n\t\t\tnew Date(storedData.expiration) > new Date()\n\t\t) {\n\t\t\tlogin(storedData.userId, storedData.token, new Date(storedData.expiration));\n\t\t}\n\t}, [login]);\n\n\treturn { token, login, logout, userId };\n};"]},"metadata":{},"sourceType":"module"}