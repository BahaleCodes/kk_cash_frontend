{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};\n\n_s(useHttpClient, \"5LFg9Ro/5iGJ4ehzHD/qJSt5Ojo=\");","map":{"version":3,"sources":["/Users/thabomponya/Documents/GitHub/kkCash/client/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","clearError","forEach","abortCtrl","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAClC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAC9B,gBAAOU,GAAP,EAA0D;AAAA,QAA9CC,MAA8C,uEAArC,KAAqC;AAAA,QAA9BC,IAA8B,uEAAvB,IAAuB;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AACzDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AACA,QAAI;AACH,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AACjCC,QAAAA,MADiC;AAEjCC,QAAAA,IAFiC;AAGjCC,QAAAA,OAHiC;AAIjCO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJW,OAAN,CAA5B;AAMA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AACAd,MAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BO,MAA3B,CAC5BC,OAAO,IAAIA,OAAO,KAAKV,aADK,CAA7B;;AAGA,UAAI,CAACI,QAAQ,CAACO,EAAd,EAAkB;AACjB,cAAM,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAvB,CAAN;AACA;;AACDtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACA,KAhBD,CAgBE,OAAOO,GAAP,EAAY;AACbrB,MAAAA,QAAQ,CAACqB,GAAG,CAACD,OAAL,CAAR;AACAtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMuB,GAAN;AACA;AACD,GA1B6B,EA2B9B,EA3B8B,CAA/B;;AA6BA,QAAMC,UAAU,GAAG,MAAM;AACxBtB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,GAFD;;AAGAL,EAAAA,SAAS,CAAC,MAAM;AACf,WAAO,MAAM;AACZ;AACAM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2Bc,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACA,KAHD;AAIA,GALQ,EAKN,EALM,CAAT;AAOA,SAAO;AAAE5B,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA,WAApB;AAAiCoB,IAAAA;AAAjC,GAAP;AACA,CA9CM;;GAAM1B,a","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\n\nexport const useHttpClient = () => {\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [error, setError] = useState();\n\n\tconst activeHttpRequests = useRef([]);\n\n\tconst sendRequest = useCallback(\n\t\tasync (url, method = 'GET', body = null, headers = {}) => {\n\t\t\tsetIsLoading(true);\n\t\t\tconst httpAbortCtrl = new AbortController();\n\t\t\tactiveHttpRequests.current.push(httpAbortCtrl);\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, {\n\t\t\t\t\tmethod,\n\t\t\t\t\tbody,\n\t\t\t\t\theaders,\n\t\t\t\t\tsignal: httpAbortCtrl.signal\n\t\t\t\t});\n\t\t\t\tconst responseData = await response.json();\n\t\t\t\tactiveHttpRequests.current = activeHttpRequests.current.filter(\n\t\t\t\t\treqCtrl => reqCtrl !== httpAbortCtrl\n\t\t\t\t);\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(responseData.message);\n\t\t\t\t}\n\t\t\t\tsetIsLoading(false);\n\t\t\t\treturn responseData;\n\t\t\t} catch (err) {\n\t\t\t\tsetError(err.message);\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\tconst clearError = () => {\n\t\tsetError(null);\n\t};\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t\tactiveHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n\t\t};\n\t}, []);\n\n\treturn { isLoading, error, sendRequest, clearError };\n};\n"]},"metadata":{},"sourceType":"module"}